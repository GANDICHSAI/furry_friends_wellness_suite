/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.systemAdmin;

import Models.StoreService;
import Models.SystemAdmin;
import Utilities.SystemAdminController;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hanee
 */
public class ManageSystemAdmin extends javax.swing.JPanel {

    /**
     * Creates new form ManageSystemAdminn
     */
    JPanel bottomPanel;
    private SystemAdmin selectedSA;
    private SystemAdmin editingSA;
    private ArrayList<SystemAdmin> systemAdminsList;
    
    public ManageSystemAdmin(JPanel bottomPanel) {
        initComponents();
        this.bottomPanel = bottomPanel;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        systemAdminTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        adminLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        systemAdminNameField = new javax.swing.JTextField();
        systemAdminEmailField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        systemAdminPasswordField = new javax.swing.JPasswordField();
        deleteSystemAdminButton = new javax.swing.JButton();
        saveChangesButton = new javax.swing.JButton();
        editSystemAdminButton = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Manage System Admin");

        systemAdminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Admin ID", "Name", "Email", "Password"
            }
        ));
        jScrollPane1.setViewportView(systemAdminTable);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Admin ID");

        adminLabel.setBackground(new java.awt.Color(255, 255, 255));
        adminLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        adminLabel.setForeground(new java.awt.Color(255, 255, 255));
        adminLabel.setText("Admin ID");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Name");

        systemAdminNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemAdminNameFieldActionPerformed(evt);
            }
        });
        systemAdminNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                systemAdminNameFieldKeyPressed(evt);
            }
        });

        systemAdminEmailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemAdminEmailFieldActionPerformed(evt);
            }
        });
        systemAdminEmailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                systemAdminEmailFieldKeyPressed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Email");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Password");

        deleteSystemAdminButton.setText("Delete System Admin");
        deleteSystemAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSystemAdminButtonActionPerformed(evt);
            }
        });

        saveChangesButton.setText("Save Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        editSystemAdminButton.setText("Edit System Admin");
        editSystemAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSystemAdminButtonActionPerformed(evt);
            }
        });

        jButton6.setText("Back to admin menu");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(adminLabel)
                    .addComponent(systemAdminEmailField)
                    .addComponent(systemAdminNameField)
                    .addComponent(systemAdminPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteSystemAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editSystemAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jLabel1))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(adminLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(systemAdminNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(systemAdminEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(systemAdminPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(editSystemAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteSystemAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void systemAdminNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemAdminNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_systemAdminNameFieldActionPerformed

    private void systemAdminEmailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemAdminEmailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_systemAdminEmailFieldActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
        AdminMenu adminMenuObj = new AdminMenu(bottomPanel);
        bottomPanel.add(adminMenuObj);
        CardLayout layout = (CardLayout) bottomPanel.getLayout();
        layout.next(bottomPanel);
    }//GEN-LAST:event_jButton6ActionPerformed
    
    /**
    * This method clears the text fields and potentially resets other fields used for system admin data management.
    */
    private void clearFields() {
        
        systemAdminNameField.setText("");

        systemAdminEmailField.setText("");
        systemAdminPasswordField.setText("");
        
        selectedSA = null;
        editingSA = null;
    }
    
    /**
    * This method populates the `systemAdminTable` with a list of all system admins retrieved from the system.
    */
    public void populateTable() {
        try {
            
            this.systemAdminsList = SystemAdminController.getAllSystemAdmins();
            DefaultTableModel tableModel = (DefaultTableModel) systemAdminTable.getModel();
            
            tableModel.setRowCount(0);
            
            for (SystemAdmin sa : systemAdminsList) {
                String[] saData = {String.valueOf(sa.getAdminID()),sa.getAdminName(),sa.getAdminEmail(), sa.getAdminPassword() };
                tableModel.addRow(saData);
            }
            
            clearFields();
            
        } catch (Exception e) {
            
        }
    }
    private void deleteSystemAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSystemAdminButtonActionPerformed
        // TODO add your handling code here:
        try {
            int selectedRowIndex = systemAdminTable.getSelectedRow();
            if (selectedRowIndex < 0) {
                
                throw new IllegalArgumentException("Please select a user to delete!");
                
            } else {
                
                DefaultTableModel model = (DefaultTableModel) systemAdminTable.getModel();
                selectedSA = systemAdminsList.get(selectedRowIndex);
                SystemAdminController.deleteSA(selectedSA);
                clearFields();
                populateTable();
                JOptionPane.showMessageDialog(null, "User succesfully deleted!", "Successfully Deleted", JOptionPane.INFORMATION_MESSAGE);
                
            }
            
        } catch (IllegalArgumentException e) {
            
            JOptionPane.showMessageDialog(this, e.getMessage(), "Data Selection Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Data Deletion Error", JOptionPane.ERROR_MESSAGE);
            
        }
        
        
        
    }//GEN-LAST:event_deleteSystemAdminButtonActionPerformed

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
        // TODO add your handling code here:
        
        try {
            
            char[] passwordChars = systemAdminPasswordField.getPassword();
            String password = new String(passwordChars);
            if (editingSA == null) {
                 throw new IllegalArgumentException("no-select");
            } 
            if(systemAdminNameField.getText().isEmpty()||systemAdminNameField.getText()==null||systemAdminEmailField.getText() == null||systemAdminEmailField.getText().isEmpty()||password.isEmpty()){
                throw new IllegalArgumentException("no-data");
            }
            else {
                SystemAdmin newSA = new SystemAdmin();
                
                newSA.setAdminEmail(systemAdminNameField.getText());
                newSA.setAdminName(systemAdminEmailField.getText());
                newSA.setAdminPassword(password);
                
                
                if (editingSA.getAdminName().equals(newSA.getAdminName()) && 
                        editingSA.getAdminEmail().equals(newSA.getAdminEmail()) &&
                        editingSA.getAdminPassword().equals(newSA.getAdminPassword())) {
                  
                    throw new IllegalArgumentException("no-edit");
                } else {
                    SystemAdminController.editSystemAdmin(editingSA, newSA);
                    clearFields();
                    populateTable();
                    JOptionPane.showMessageDialog(null, "User succesfully updated!", "Successfully Updated", JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
        } catch (IllegalArgumentException e) {
            if (e.getMessage().equals("no-edit")) {
                JOptionPane.showMessageDialog(this, "Please make some changes to the user you have selected!", "Data Updation Error", JOptionPane.ERROR_MESSAGE);
            }
            
            if (e.getMessage().equals("no-select")) {
                JOptionPane.showMessageDialog(this, "Please make some you selected a user to edit!", "Data Updation Error", JOptionPane.ERROR_MESSAGE);
            }
            
            if(e.getMessage().equals("no-data")){
                JOptionPane.showMessageDialog(this,"Please fill out new system admin creds","Data Updation Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    private void editSystemAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSystemAdminButtonActionPerformed
        // TODO add your handling code here:
        
        try {
            int selectedRowIndex = systemAdminTable.getSelectedRow();
            if (selectedRowIndex < 0) {
                throw new IllegalArgumentException("Please select a user you want to edit the data for!");
            } else {
                editingSA = systemAdminsList.get(selectedRowIndex);
                adminLabel.setText((String) Integer.toString(editingSA.getAdminID()));
                systemAdminNameField.setText(editingSA.getAdminName());
                systemAdminEmailField.setText(editingSA.getAdminEmail());
                systemAdminPasswordField.setText(editingSA.getAdminPassword());


            }
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Selection Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editSystemAdminButtonActionPerformed

    private void systemAdminNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_systemAdminNameFieldKeyPressed
        // TODO add your handling code here:
        
        try{
             
             if (systemAdminNameField.getText().matches("^[a-zA-Z ]+$")){
                 
                 systemAdminNameField.setForeground(Color.black);

            }
            
            else{
                throw new Exception();
            }
                        
        }
        catch(Exception e){
            
            systemAdminNameField.setForeground(Color.red);

        }
        
        
    }//GEN-LAST:event_systemAdminNameFieldKeyPressed

    private void systemAdminEmailFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_systemAdminEmailFieldKeyPressed
        // TODO add your handling code here:
        
        try{
             
             if (systemAdminEmailField.getText().matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")){
                 
                 systemAdminEmailField.setForeground(Color.black);

            }
            
            else{
                throw new Exception();
            }
                        
        }
        catch(Exception e){
            
            systemAdminEmailField.setForeground(Color.red);

        }
        
        
    }//GEN-LAST:event_systemAdminEmailFieldKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminLabel;
    private javax.swing.JButton deleteSystemAdminButton;
    private javax.swing.JButton editSystemAdminButton;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JTextField systemAdminEmailField;
    private javax.swing.JTextField systemAdminNameField;
    private javax.swing.JPasswordField systemAdminPasswordField;
    private javax.swing.JTable systemAdminTable;
    // End of variables declaration//GEN-END:variables
}
